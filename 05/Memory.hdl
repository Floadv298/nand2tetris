// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

	//only includes the User Writable space, there is no ROM inside (implement in CPU?)
	//use as much as possible built-in chips
	//RAM16K, Screen, Keyboard 
	
	// 15, 14, 13, 12, 
	//  x   0   0   0  
	//  x000 0000 0000 0000
	//        RAM16K
	// IN[16}, load, address[14], OUT[16]
	//  x011 1111 1111 1111
	//  x100 0000 0000 0000
	//        Screen
	// address[13], IN/OUT[16], load
	//  x101 1111 1111 1111
	//  x110 0000 0000 0000
	//       Keyboard 
	// out[16]
	//  x11x xxxx xxxx xxxx  
	//      *NOT VALID*
	
	RAM16K (in=in, load=r10, address=address[0..13], out=rout0);
	Screen (in=in, load=r02, address=address[0..12], out=rout2);
	Keyboard (out=rout3);
	
	//select which output based on selected Register
	Mux4Way16 (a=rout0, b=rout0, c=rout2, d=rout3, sel=address[13..14], out=out);
	
	//make address selection, put a 1 (true) on the selected register, use address, to simulate select
	DMux4Way (in=load, sel=address[13..14], a=r00, b=r01, c=r02); //d=r03
	//                      don't use r03
	
	Or (a=r00, b=r01, out=r10);
}