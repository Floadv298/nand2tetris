// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	//use: ARegister, DRegister, Mux16, ALU, PC, 
	//debug: use multiple outs in chips
	
	ALU(x=dregout,y=ymuxout ,zx=instruction[11] ,nx=instruction[10] , zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] , no=instruction[6] ,
		out=mux01in ,out=outM ,out=dregin , zr=zrout ,ng=ngout );
	DRegister(in=dregin ,load=instruction[4] ,out=dregout);
	Mux16(a=aregout ,b=inM , sel=instruction[12] , out=ymuxout);
	Or(a=ainstruction, b=instruction[5], out=aregload);
	ARegister(in=amuxout ,load=aregload ,out=aregout, out=aregpc);
	Mux16(a=mux01in ,b=instruction , sel=ainstruction , out=amuxout);
	PC(in=aregpc ,load=loadpc ,inc=pcinc ,reset=reset , out=pc);
	Or(a=instruction[3], b=instruction[3], out=writeM);
	
	//PC logic, need a Bit to have the first reset to set inc to 1
	//Idea: it is 0 by starting and get a 1 (true) all the time, then when reset come it loads the 1
	//      help to have an clear state in the beginning
	Bit(in=true, load=reset, out=pcinc);
	
	//write logic part for control signals here
	//ixxaccccccdddjjj
	// i: 0 = A instruction, load to A-Reg, 1 = C instruction
	// a = define if Register or Memory
	//      a = 0 : Register ; a = 1 : Memory   
	// cccccc =[11,10,9,8,7,6] compare
	// ddd =[5,4,3] destinie
	// jjj =[2,1,0] j1, j2, j3   jump 
	
	//A-Instruction (if first bit is 0, load A-Reg)
	Nand(a=instruction[15], b=instruction[15], out=ainstruction);
	
	//C-Instruction (if first bit is 1, do some of the logic stuff)
	//a selection (use M-Reg or A-Reg), is done at Mux16 level above
	//c5 (c[7]) goes to f of ALU , 	//c1 (c[11]) = zx , c2 = nx , c3 = zy , c4 = ny , c6 = no
	
	//To-Do jjj , when there is any jump, load A reg- and jump there, 
	//mi the jump instructions with the ALU condition status output
	Not(in=zrout, out=zroutn);
	Not(in=ngout, out=ngoutn);
	And(a=zroutn, b=ngoutn, out=posout); 		//calculate > 0
	
	//JGT jump if > 0 
	And(a=instruction[0], b=posout ,out=injgt);
	//JEQ jump if = 0 
	And(a=instruction[1], b=zrout ,out=injeq);
	//JGE jump if >= 0
	And(a=instruction[0], b=instruction[1], out=inj3j2);
	Or(a=posout, b=zrout, out=ineg0);
	And(a=inj3j2, b=ineg0 ,out=injge);
	//JLT jump if < 0
	And(a=instruction[2], b=ngout ,out=injlt);
	//JNE jump if not 0
	And(a=instruction[0], b=instruction[2], out=inj3j1);
	And(a=inj3j1, b=zroutn ,out=injne);
	//JLE jump if =< 0
	And(a=instruction[1], b=instruction[2], out=inj2j1);
	Or(a=zrout, b=ngout, out=ines0);  //if 0 or < 0 then in equal smaller 0 
	And(a=inj2j1, b=ines0 ,out=injle);
	//JMP just jump
	And(a=instruction[0], b=inj2j1 ,out=injmp);
	
	//Or(a= ,b= ,out=);
	
	
	Or8Way(in= ,out=loadpc); //3 way take all the 3 jumps together
}