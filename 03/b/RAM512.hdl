// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Put your code here:
	
	//Start with an 8RAM
	RAM64 (in=in, load=r00, address=address[0..5], out=rout0);
	RAM64 (in=in, load=r01, address=address[0..5], out=rout1);
	RAM64 (in=in, load=r02, address=address[0..5], out=rout2);
	RAM64 (in=in, load=r03, address=address[0..5], out=rout3);
	RAM64 (in=in, load=r04, address=address[0..5], out=rout4);
	RAM64 (in=in, load=r05, address=address[0..5], out=rout5);
	RAM64 (in=in, load=r06, address=address[0..5], out=rout6);
	RAM64 (in=in, load=r07, address=address[0..5], out=rout7);
		

	//only allow output if there is a valid read? check simulator!
	//problem still in logic....
	Mux8Way16 (a=rout0, b=rout1, c=rout2, d=rout3, e=rout4, f=rout5, g=rout6, h=rout7, sel=address[6..8], out=out);
	
	//make address selection, put a 1 (true) on the selected register, use address, to simulate select
	DMux8Way (in=load, sel=address[6..8], a=r00, b=r01, c=r02, d=r03, e=r04, f=r05, g=r06, h=r07);
}